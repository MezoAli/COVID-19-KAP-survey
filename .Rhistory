filter(get(score) %in% c(level1, level2))
# Run finalfit on filtered data
finalfit_result <- filtered_df %>%
finalfit(dependent = score,
explanatory = explanatory)
# Return the table with knitr::kable to see the results in the console
finalfit_result %>% knitr::kable(.)
# Export the results as csv file
rio::export(x = finalfit_result,
file = paste0("finalfit_",score,"_",level1,"_",level2,".csv"))
}
finalfit_results(perception.df,"perception_score","high","low")
finalfit_results <- function(df, score, level1, level2) {
explanatory <- demographic.df %>%
colnames(.)
# Ensure score is numeric
df <- df %>% mutate(age = as.numeric(age))
# Filter rows based on the levels of the score
filtered_df <- df %>%
filter(get(score) %in% c(level1, level2))
# Run finalfit on filtered data
finalfit_result <- filtered_df %>%
finalfit(dependent = score,
explanatory = explanatory)
# Return the table with knitr::kable to see the results in the console
print(knitr::kable(finalfit_result))
# Export the results as csv file
rio::export(x = finalfit_result,
file = paste0("finalfit_",score,"_",level1,"_",level2,".csv"))
}
finalfit_results(perception.df,"perception_score","high","moderate")
finalfit_results(perception.df,"perception_score","high","moderate")
# running an example like for attitude.df , attitude_score , "high" , "moderate"
finalfit_results(attitude.df,"attitude_score","high","moderate")
finalfit_results(perception.df,"perception_score","high","low")
View(attitude.df)
# running an example like for attitude.df , attitude_score , "high" , "moderate"
finalfit_results(attitude.df,"attitude_score","high","low")
# running an example like for attitude.df , attitude_score , "high" , "moderate"
finalfit_results(attitude.df,"attitude_score","high","low")
finalfit_results(knowledge.df,"knowledge_score","high","moderate")
finalfit_results(knowledge.df,"knowledge_score","high","low")
finalfit_results(perception.df,"perception_score","high","low")
finalfit_results(perception.df,"perception_score","high","moderate")
demographic.df <- data %>%
select(1:5) %>%
mutate(across(.cols = 2:5,
.fns = as_factor))
explanatory <- demographic.df %>%
colnames(.)
finalfit_results <- function(df, score, level1, level2) {
explanatory <- demographic.df %>%
colnames(.)
# Ensure score is numeric
df <- df %>% mutate(age = as.numeric(age))
# Filter rows based on the levels of the score
filtered_df <- df %>%
filter(get(score) %in% c(level1, level2))
# Run finalfit on filtered data
finalfit_result <- filtered_df %>%
finalfit(dependent = score,
explanatory = explanatory)
# Return the table with knitr::kable to see the results in the console
print(knitr::kable(finalfit_result))
# Export the results as csv file
rio::export(x = finalfit_result,
file = paste0("finalfit_",score,"_",level1,"_",level2,".csv"))
}
finalfit_results(perception.df,"perception_score","high","moderate")
finalfit_results(knowledge.df,"knowledge_score","high","low")
finalfit_results(perception.df,"perception_score","high","low")
demographic.df <- data %>%
select(1:6) %>%
mutate(across(.cols = 2:6,
.fns = as_factor))
knowledge.df <- tibble(demographic.df,knowledge_score = knowledge.scores$bloom_level_knowledge)
attitude.df <- tibble(demographic.df,attitude_score = attitude.scores$bloom_level_attitude)
perception.df <- tibble(demographic.df,perception_score = perception.scores$bloom_level_perception)
# create explanatory vector that contain names of basic info
explanatory <- demographic.df %>%
colnames(.)
knowledge_high_moderate <- knowledge.df %>%
mutate(age = as.numeric(age)) %>%
filter(knowledge_score %in% c("high","moderate")) %>%
finalfit(dependent = "knowledge_score",
explanatory = explanatory)
knowledge_high_moderate %>%  knitr::kable(.)
model_knowledge_high_moderate <- knowledge.df %>%
mutate(age = as.numeric(age)) %>%
filter(knowledge_score %in% c("high","moderate")) %>%
glm(knowledge_score ~ age + sex + marital_status + education_level + job + health_condition, data = .,family = binomial())
summary(model_knowledge_high_moderate)
explanatory <- demographic.df %>%
colnames(.)
finalfit_results <- function(df, score, level1, level2) {
explanatory <- demographic.df %>%
colnames(.)
# Ensure score is numeric
df <- df %>% mutate(age = as.numeric(age))
# Filter rows based on the levels of the score
filtered_df <- df %>%
filter(get(score) %in% c(level1, level2))
# Run finalfit on filtered data
finalfit_result <- filtered_df %>%
finalfit(dependent = score,
explanatory = explanatory)
# Return the table with knitr::kable to see the results in the console
print(knitr::kable(finalfit_result))
# Export the results as csv file
rio::export(x = finalfit_result,
file = paste0("finalfit_",score,"_",level1,"_",level2,".csv"))
}
# running an example like for attitude.df , attitude_score , "high" , "moderate"
finalfit_results(attitude.df,"attitude_score","high","low")
finalfit_results(knowledge.df,"knowledge_score","high","low")
finalfit_results(perception.df,"perception_score","high","low")
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(correlation.matrix, lab = TRUE)
ggcorrplot(correlation.matrix, lab = TRUE,title = "Correlation Matrix")
ggcorrplot(correlation.matrix,method = "circle", lab = TRUE,title = "Correlation Matrix")
ggcorrplot(correlation.matrix,method = "square", lab = TRUE,title = "Correlation Matrix")
correlation.matrix.plot <- ggcorrplot(correlation.matrix,method = "square", lab = TRUE,title = "Correlation Matrix")
ggsave(filename = "correlation_matrix.png",
plot = correlation.matrix.plot,
width = 29,
height = 21,
units = "cm",
dpi = 600)
barplot(perception.prop.table)
knowledge.prob.tables %>% as.data.frame(.)
knowledge.prob.tables %>% as.data.frame(.) %>%
ggplot(.,aes(x = Var1,
y = Freq,
fill = Var1)) +
geom_col()
ggplot(.,aes(x = level,
y = percentage,
fill = level)) +
geom_col()
knowledge.prob.tables %>% as.data.frame(.) %>%
rename(level = 1,
percentage = 2) %>%
ggplot(.,aes(x = level,
y = percentage,
fill = level)) +
geom_col()
theme(plot.title = element_text(family = "bold",hjust = 0.5))
knowledge.prob.tables %>% as.data.frame(.) %>%
rename(level = 1,
percentage = 2) %>%
ggplot(.,aes(x = level,
y = percentage,
fill = level)) +
geom_col() +
ggtitle("Knowledge Percentage") +
theme(plot.title = element_text(family = "bold",hjust = 0.5))
domins_levels_percentages <- function(table,title){
table %>% as.data.frame(.) %>%
rename(level = 1,
percentage = 2) %>%
ggplot(.,aes(x = level,
y = percentage,
fill = level)) +
geom_col() +
ggtitle(title) +
theme(plot.title = element_text(family = "bold",hjust = 0.5))
}
domins_levels_percentages(attitude.prop.table,"Attitude Percentage")
domins_levels_percentages <- function(table,title){
table %>% as.data.frame(.) %>%
rename(level = 1,
percentage = 2) %>%
ggplot(.,aes(x = level,
y = percentage,
fill = level)) +
geom_col() +
geom_text(aes(label = percentage), vjust = -0.5) +
ggtitle(title) +
theme(plot.title = element_text(family = "bold",hjust = 0.5))
}
domins_levels_percentages(attitude.prop.table,"Attitude Percentage")
domins_levels_percentages <- function(table,title){
table %>% as.data.frame(.) %>%
rename(level = 1,
percentage = 2) %>%
ggplot(.,aes(x = level,
y = percentage,
fill = level)) +
geom_col() +
geom_text(aes(label = percentage), vjust = -0.5) +
ggtitle(title) +
theme(plot.title = element_text(family = "bold",hjust = 0.5))
}
domins_levels_percentages(knowledge.prob.tables,"Knowledge Percentages")
domins_levels_percentages(attitude.prop.table,"Attitude Percentages")
domins_levels_percentages(perception.prop.table,"Perception Percentages")
knowledge_high_moderate
knowledge_high_moderate
library(car)
vif(knowledge_high_moderate)
vif(model_knowledge_high_moderate)
finalfit_results(perception.df,"perception_score","high","moderate")
warnings()
perception.df
library(psych)
cronbach_result <- alpha(data)
cronbach_result <- alpha(data)
data %>%
colnames(.)
View(data)
cronbach_questions <- data %>%
select(7,8,9,10,12,13,14,16,17,18,19,21:30)
View(cronbach_questions)
cronbach_questions <- data %>%
select(7,8,9,10,12,13,14,16,17,18,19,21:30) %>%
mutate(across(everything(),
.fns = ~ case_when(. == "yes" ~ 1,
. == "no" ~ 0,
T ~ 0)))
View(cronbach_questions)
cronbach_results <- alpha(cronbach_questions)
cronbach_results
View(cronbach_results)
summary(cronbach_results)
cronbach_results <- alpha(cronbach_questions) %>%
summary(.)
cronbach_results
cronbach_results <- alpha(cronbach_questions) %>%
summary(.)
cronbach_results <- alpha(cronbach_questions)
cronbach_results_summary <-  summary(cronbach_results)
cronbach_results_summary
cronbach_results_summary <- summary(cronbach_results)
summary(cronbach_results)
cronbach_all_questions <- data %>%
select(7,8,9,10,12,13,14,16,17,18,19,21:30) %>%
mutate(across(everything(),
.fns = ~ case_when(. == "yes" ~ 1,
. == "no" ~ 0,
T ~ 0)))
cronbach_all_questions_results <- alpha(cronbach_questions)
cronbach_all_questions_results
summary(cronbach_all_questions_results)
knowledge.questions <- data %>%
select(10,12,13,14)  %>%
mutate(across(everything(),
.fns = ~ case_when(. == "yes" ~ 1,
. == "no" ~ 0,
T ~ 0)))
View(knowledge.questions)
cronbach_knowledge_questions_results <- alpha(knowledge.questions)
summary(cronbach_knowledge_questions_results)
attitude.questions <- data %>%
select(16,17,18,19,21,22,23) %>%
mutate(across(everything(),
.fns = ~ case_when(. == "yes" ~ 1,
. == "no" ~ 0,
T ~ 0)))
attitude.questions <- data %>%
select(16,17,18,19,21,22,23) %>%
mutate(across(everything(),
.fns = ~ case_when(. == "yes" ~ 1,
. == "no" ~ 0,
T ~ 0)))
cronbach_attitude_questions_results <- alpha(attitude.questions)
summary(cronbach_attitude_questions_results)
perception.qquestions <- data %>%
select(24:30) %>%
mutate(across(everything(),
.fns = ~ case_when(. == "yes" ~ 1,
. == "no" ~ 0,
T ~ 0)))
perception.questions <- data %>%
select(24:30) %>%
mutate(across(everything(),
.fns = ~ case_when(. == "yes" ~ 1,
. == "no" ~ 0,
T ~ 0)))
cronbach_perception_questions_results <- alpha(perception.questions)
summary(cronbach_perception_questions_results)
summary(cronbach_attitude_questions_results)
summary(cronbach_knowledge_questions_results)
summary(cronbach_all_questions_results)
domins_levels_percentages(knowledge.prob.tables,"Knowledge Percentages")
source("C:/Users/c.delivery for lap/Desktop/MARS biostatstics/Project 1/survey.R", echo=TRUE)
install.packages("car")
install.packages("finalfit")
install.packages("psych")
install.packages("knitr")
install.packages("ggcorrplot")
install.packages("tidyverse")
shapiro.test(total.scores$total_percentage_knowledge)
total.scores <- tibble(knowledge.scores,attitude.scores,perception.scores) %>%
select(total_percentage_knowledge,total_percentage_attitude,total_percentage_perception)
library(tidyverse)
library(rio)
library(janitor)
library(finalfit)
library(knitr)
library(nortest)
library(ggcorrplot)
library(car)
library(psych)
shapiro.test(total.scores$total_percentage_knowledge)
total.scores <- tibble(knowledge.scores,attitude.scores,perception.scores) %>%
select(total_percentage_knowledge,total_percentage_attitude,total_percentage_perception)
demographic.df <- data %>%
select(1:6) %>%
mutate(across(.cols = 2:6,
.fns = as_factor))
knowledge.yes <- data %>%
select(10,13) %>%
mutate(across(.cols = everything(),
.fns = ~ case_when(. == "yes" ~ 2,
T ~ 0),
.names = "score_{col}"))
knowledge.no <- data %>%
select(12,14) %>%
mutate(across(.cols = everything(),
.fns = ~ case_when(. == "no" ~ 2,
T ~ 0),
.names = "score_{col}"))
knowledge.scores <- tibble(knowledge.yes,knowledge.no) %>%
select(contains("score")) %>%
mutate(total_score_knowledge = rowSums(across(everything())),
total_percentage_knowledge = ( total_score_knowledge / 8) * 100,
bloom_level_knowledge = cut(total_percentage_knowledge,breaks = c(-1,60,80,101),labels = c("low","moderate","high")))
knowledge.prob.tables <- table(knowledge.scores$bloom_level_knowledge) %>%
prop.table(.) * 100
domins_levels_percentages <- function(table,title){
table %>% as.data.frame(.) %>%
rename(level = 1,
percentage = 2) %>%
ggplot(.,aes(x = level,
y = percentage,
fill = level)) +
geom_col() +
geom_text(aes(label = percentage), vjust = -0.5) +
ggtitle(title) +
theme(plot.title = element_text(family = "bold",hjust = 0.5))
}
domins_levels_percentages(knowledge.prob.tables,"Knowledge Percentages")
attitude.yes <- data %>%
select(16,17,18,19,21,22,23) %>%
mutate(across(.cols = 1:7,
.fns = ~ case_when(. == "yes" ~ 2,
T ~ 0),
.names = "score_{col}"))
attitude.scores <- attitude.yes %>%
select(contains("score")) %>%
mutate(total_score_attitude =  rowSums(across(1:7)),
total_percentage_attitude = round((total_score_attitude / 14) * 100,1),
bloom_level_attitude = cut(total_percentage_attitude,breaks = c(-1,60,80,101),labels = c("low","moderate","high")))
attitude.prop.table <- table(attitude.scores$bloom_level_attitude) %>%
prop.table(.) * 100
domins_levels_percentages(attitude.prop.table,"Attitude Percentages")
perception.yes <- data %>%
select(24,25,26,29,30) %>%
mutate(across(.cols = everything(),
.fns = ~ case_when(. == "yes" ~ 2,
T ~ 0),
.names = "score_{col}"))
perception.no <- data %>%
select(27,28) %>%
mutate(across(.cols = everything(),
.fns = ~ case_when(. == "no" ~ 2,
T ~ 0),
.names = "score_{col}"))
perception.scores <- tibble(perception.yes,perception.no) %>%
select(contains("score")) %>%
mutate(total_score_perception =  rowSums(across(1:7)),
total_percentage_perception = round((total_score_perception / 14) * 100,1),
bloom_level_perception = cut(total_percentage_perception,breaks = c(-1,60,80,101),labels = c("low","moderate","high")))
perception.prop.table <- table(perception.scores$bloom_level_perception) %>%
prop.table(.) * 100
domins_levels_percentages(perception.prop.table,"Perception Percentages")
total.scores <- tibble(knowledge.scores,attitude.scores,perception.scores) %>%
select(total_percentage_knowledge,total_percentage_attitude,total_percentage_perception)
total.scores <- tibble(knowledge.scores,attitude.scores,perception.scores) %>%
select(total_percentage_knowledge,total_percentage_attitude,total_percentage_perception)
shapiro.test(total.scores$total_percentage_knowledge)
knowledge_high_moderate <- knowledge.df %>%
mutate(age = as.numeric(age)) %>%
filter(knowledge_score %in% c("high","moderate")) %>%
finalfit(dependent = "knowledge_score",
explanatory = explanatory)
# create explanatory vector that contain names of basic info
explanatory <- demographic.df %>%
colnames(.)
knowledge_high_moderate <- knowledge.df %>%
mutate(age = as.numeric(age)) %>%
filter(knowledge_score %in% c("high","moderate")) %>%
finalfit(dependent = "knowledge_score",
explanatory = explanatory)
knowledge.df <- tibble(demographic.df,knowledge_score = knowledge.scores$bloom_level_knowledge)
attitude.df <- tibble(demographic.df,attitude_score = attitude.scores$bloom_level_attitude)
perception.df <- tibble(demographic.df,perception_score = perception.scores$bloom_level_perception)
knowledge_high_moderate <- knowledge.df %>%
mutate(age = as.numeric(age)) %>%
filter(knowledge_score %in% c("high","moderate")) %>%
finalfit(dependent = "knowledge_score",
explanatory = explanatory)
knowledge_high_moderate
knowledge_high_moderate
knowledge_high_moderate
vif(model_knowledge_high_moderate)
model_knowledge_high_moderate <- knowledge.df %>%
mutate(age = as.numeric(age)) %>%
filter(knowledge_score %in% c("high","moderate")) %>%
glm(knowledge_score ~ age + sex + marital_status + education_level + job + health_condition, data = .,family = binomial())
summary(model_knowledge_high_moderate)
vif(model_knowledge_high_moderate)
# running an example like for attitude.df , attitude_score , "high" , "moderate"
finalfit_results(knowledge.df,"knowledge_score","high","low")
finalfit_results <- function(df, score, level1, level2) {
explanatory <- demographic.df %>%
colnames(.)
# Ensure score is numeric
df <- df %>% mutate(age = as.numeric(age))
# Filter rows based on the levels of the score
filtered_df <- df %>%
filter(get(score) %in% c(level1, level2))
# Run finalfit on filtered data
finalfit_result <- filtered_df %>%
finalfit(dependent = score,
explanatory = explanatory)
# Return the table with knitr::kable to see the results in the console
print(knitr::kable(finalfit_result))
# Export the results as csv file
rio::export(x = finalfit_result,
file = paste0("finalfit_",score,"_",level1,"_",level2,".csv"))
}
# running an example like for attitude.df , attitude_score , "high" , "moderate"
finalfit_results(knowledge.df,"knowledge_score","high","low")
finalfit_results(attitude.df,"attitude_score","high","low")
finalfit_results(perception.df,"perception_score","high","low")
finalfit_results(attitude.df,"attitude_score","high","moderate")
attitude.df %>%
mutate(age = as.numeric(age)) %>%
filter(knowledge_score %in% c("high","moderate"))
attitude.df %>%
mutate(age = as.numeric(age)) %>%
filter(knowledge_score %in% c("high","moderate"))
attitude.df %>%
mutate(age = as.numeric(age)) %>%
filter(attitude_score %in% c("high","moderate"))
model_attitude_high_moderate <- attitude.df %>%
mutate(age = as.numeric(age)) %>%
filter(attitude_score %in% c("high","moderate")) %>%
glm(attitude_score ~ age + sex + marital_status + education_level + job + health_condition, data = .,family = binomial())
summary(model_attitude_high_moderate)
vif(model_attitude_high_moderate)
vif(model_knowledge_high_moderate)
vif(model_attitude_high_moderate)
summary(model_attitude_high_moderate)
attitude.df %>%
mutate(age = as.numeric(age)) %>%
filter(attitude_score %in% c("high","moderate"))
attitude.df %>%
mutate(age = as.numeric(age)) %>%
select(-job) %>%
filter(attitude_score %in% c("high","moderate"))
model_attitude_high_moderate_without_job <- attitude.df %>%
mutate(age = as.numeric(age)) %>%
select(-job) %>%
filter(attitude_score %in% c("high","moderate")) %>%
glm(attitude_score ~ age + sex + marital_status + education_level + health_condition, data = .,family = binomial())
vif(model_attitude_high_moderate_without_job)
summary(model_attitude_high_moderate)
model_attitude_high_moderate_without_job <- attitude.df %>%
mutate(age = as.numeric(age)) %>%
select(-job) %>%
filter(attitude_score %in% c("high","moderate")) %>%
glm(attitude_score ~ age + sex + marital_status + education_level + health_condition, data = .,family = binomial())
summary(model_attitude_high_moderate_without_job)
finalfit_results_all_explanatory <- function(df, score, level1, level2) {
explanatory <- demographic.df %>%
colnames(.)
# Ensure score is numeric
df <- df %>% mutate(age = as.numeric(age))
# Filter rows based on the levels of the score
filtered_df <- df %>%
filter(get(score) %in% c(level1, level2))
# Run finalfit on filtered data
finalfit_result <- filtered_df %>%
finalfit(dependent = score,
explanatory = explanatory)
# Return the table with knitr::kable to see the results in the console
print(knitr::kable(finalfit_result))
# Export the results as csv file
rio::export(x = finalfit_result,
file = paste0("finalfit_",score,"_",level1,"_",level2,".csv"))
}
finalfit_results_single_explanatory <- function(df,explanatory, score, level1, level2) {
df <- df %>% mutate(age = as.numeric(age))
# Filter rows based on the levels of the score
filtered_df <- df %>%
filter(get(score) %in% c(level1, level2))
# Run finalfit on filtered data
finalfit_result <- filtered_df %>%
finalfit(dependent = score,
explanatory = explanatory)
# Return the table with knitr::kable to see the results in the console
print(knitr::kable(finalfit_result))
# Export the results as csv file
rio::export(x = finalfit_result,
file = paste0("finalfit_","explanatory_",score,"_",level1,"_",level2,".csv"))
}
finalfit_results_single_explanatory(attitude.df,"age","attitude_score","high","moderate")
finalfit_results_single_explanatory(attitude.df,"job","attitude_score","high","moderate")
finalfit_results_single_explanatory(attitude.df,"job","attitude_score","high","moderate")
